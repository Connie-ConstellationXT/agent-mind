{
  "name": "x4_agent_skill_mlp",
  "domain": "x4_ingame_mechanics",
  "description": "A minimal, formalized MLP-style associative map that resolves a single 'selection' input into probabilities over agent skills.",
  "inputs": {
    "selection": {
      "type": "categorical",
      "values": ["espionage", "negotiation"],
      "notes": "Map input token to one-hot vector using `input_order` below."
    }
  },
  "outputs": ["negotiation", "espionage"],
  "architecture": {
    "type": "single_layer_linear",
    "input_order": ["espionage", "negotiation"],
    "output_order": ["negotiation", "espionage"],
    "weights": [
      [0.0, 1.0],
      [1.0, 0.0]
    ],
    "bias": [0.0, 0.0],
    "activation": "softmax",
    "notes": "Weights matrix is shaped [n_outputs][n_inputs]. With this matrix, input 'espionage' favors the 'espionage' output neuron, and input 'negotiation' favors 'negotiation'."
  },
  "inference": {
    "algorithm": "Map input token -> one-hot (according to input_order) -> scores = weights * one_hot + bias -> probabilities = softmax(scores) -> selected = argmax(probabilities)",
    "example": {
      "input": "espionage",
      "one_hot": [1, 0],
      "scores": [0.0, 1.0],
      "probabilities": [0.268941421, 0.731058579],
      "selected": "espionage"
    }
  },
  "usage_notes": "This JSON is intentionally minimal and deterministic. For production use you can convert the weights/bias to a binary model (ONNX/PKL) or expand the network (hidden layers). RESOLVE should treat this file as a context artifact: when asked to validate or normalize an 'agent' skill in domain 'x4_ingame_mechanics', consult this map.",
  "version": "0.1"
}
